<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var uri = request.getRequestURI();
var uriMatcher = new URIMatcher(String(uri));

var log = new Log("apis/group-api.jag");

var utility = require("../modules/utility.js").utility;

var hostname = utility.getIoTServerConfig("IoTMgtHost");
var carbonHttpsServletTransport = "https://" + hostname + ":9443";
var deviceCloudService = carbonHttpsServletTransport + "/common/group_manager";

var server = require('store').server;
var user = server.current(session);

var groupModule = require("../modules/group.js").groupModule;

var result, endPoint, data, groupId, group, role;

if (!user) {
    response = responseProcessor.buildErrorResponse(response, 401, "Unauthorized");
} else {
    user = user.um;
    if (uriMatcher.match("/{context}/apis/group/add")) {
        group = request.getContent();
        result = groupModule.addGroup(group);
    } else if (uriMatcher.match("/{context}/apis/group/id/{groupId}/update")) {
        groupId = uriMatcher.elements().groupId;
        group = request.getContent();
        result = groupModule.updateGroup(groupId, group);
    } else if (uriMatcher.match("/{context}/apis/group/id/{groupId}/remove")) {
        groupId = uriMatcher.elements().groupId;
        result = groupModule.removeGroup(groupId);
    } else if (uriMatcher.match("/{context}/apis/group/id/{groupId}")) {
        groupId = uriMatcher.elements().groupId;
        result = groupModule.getGroup(groupId);
    } else if (uriMatcher.match("/{context}/apis/group/name/{groupName}")) {
        var groupName = uriMatcher.elements().groupName;
        result = groupModule.findGroups(groupName);
    } else if (uriMatcher.match("/{context}/apis/group/all")) {
        result = groupModule.getGroups();
    } else if (uriMatcher.match("/{context}/apis/group/all/count")) {
        result = groupModule.getGroupCount();
    } else if (uriMatcher.match("/{context}/apis/group/id/{groupId}/share")) {
        groupId = uriMatcher.elements().groupId;
        var shareUser = request.getContent()["shareUser"];
        role = request.getContent()["role"];
        result = groupModule.shareGroup(groupId, shareUser, role);
    } else if (uriMatcher.match("/{context}/apis/group/id/{groupId}/unshare")) {
        groupId = uriMatcher.elements().groupId;
        var unShareUser = request.getContent()["unShareUser"];
        role = request.getContent()["role"];
        result = groupModule.unshareGroup(groupId, unShareUser, role);
    } else if (uriMatcher.match("/{context}/apis/group/id/{groupId}/role/add")) {
        groupId = uriMatcher.elements().groupId;
        var permissions = request.getContent()["permissions"];
        role = request.getContent()["role"];
        result = groupModule.addRole(groupId, role, permissions);
    } else if (uriMatcher.match("/{context}/apis/group/id/{groupId}/role/delete")) {
        groupId = uriMatcher.elements().groupId;
        role = request.getContent()["role"];
        endPoint = deviceCloudService + "/group/id/" + groupId + "/role/" + role;
        result = groupModule.deleteRole(groupId, role);
    } else if (uriMatcher.match("/{context}/apis/group/id/{groupId}/role/all")) {
        groupId = uriMatcher.elements().groupId;
        result = groupModule.getGroupRoles(groupId);
    } else if (uriMatcher.match("/{context}/apis/group/id/{groupId}/{userId}/role/all")) {
        groupId = uriMatcher.elements().groupId;
        var userId = uriMatcher.elements().userId;
        result = groupModule.getUserRoles(groupId, userId);
    } else if (uriMatcher.match("/{context}/apis/group/id/{groupId}/{userId}/rolemapping")) {
        groupId = uriMatcher.elements().groupId;
        userId = uriMatcher.elements().userId;
        result = groupModule.getRoleMapping(groupId, userId);
    } else if (uriMatcher.match("/{context}/apis/group/id/{groupId}/{userId}/roleupdate")) {
        groupId = uriMatcher.elements().groupId;
        userId = uriMatcher.elements().userId;
        var roleMap = request.getContent();
        result = groupModule.setRoleMapping(groupId, userId, roleMap);
    } else if (uriMatcher.match("/{context}/apis/group/id/{groupId}/user/all")) {
        groupId = uriMatcher.elements().groupId;
        result = groupModule.getUsers(groupId);
    } else if (uriMatcher.match("/{context}/apis/group/id/{groupId}/device/all")) {
        groupId = uriMatcher.elements().groupId;
        result = groupModule.getDevices(groupId);
    } else if (uriMatcher.match("/{context}/apis/group/id/{groupId}/assign")) {
        groupId = uriMatcher.elements().groupId;
        var deviceId = request.getContent()["deviceId"];
        var deviceType = request.getContent()["deviceType"];
        result = groupModule.assignDevice(groupId, deviceId, deviceType);
    }
}
// returning the result.
if (result) {
    response.status = result.xhr.status;
    print(result.data);
}
%>
