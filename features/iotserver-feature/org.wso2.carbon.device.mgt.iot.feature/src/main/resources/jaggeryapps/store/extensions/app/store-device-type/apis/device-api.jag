<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var uri = request.getRequestURI();
var uriMatcher = new URIMatcher(String(uri));

var log = new Log("apis/device-api.jag");

var constants = require("../modules/constants.js");

var deviceModule = require("../modules/device.js").deviceModule;
var utility = require("../modules/utility.js").utility;

var CarbonUtils = Packages.org.wso2.carbon.utils.CarbonUtils;
var hostname = utility.getIoTServerConfig("IoTMgtHost");
var carbonHttpsServletTransport = "https://" + hostname + ":9443";

var responseProcessor = require('utils').response;
response.contentType = 'application/json';

var server = require('store').server;
var user = server.current(session);

var result;

if (!user) {
    //response = responseProcessor.buildErrorResponse(response, 401, "Unauthorized");
    response.sendRedirect("/store/login?#login-required");
    exit();
} else {
    if (uriMatcher.match("/{context}/apis/devices/{deviceTypeName}/thumbnail/")) {
        deviceTypeId = null;
        if (deviceTypeId) {
            result = deviceTypeId;
        } else {
            log.error("Device type `" + deviceTypeName + "` not found!");
            result = 400;
        }

    } else if (uriMatcher.match("/{context}/apis/devices/sketch/download/{downloadId}")) {
        downloadId = uriMatcher.elements().downloadId;
        //Just download the already created zip archive
        var sketchFolder = "repository/resources/sketches";
        var archivesPath = "file://" + CarbonUtils.getCarbonHome() + "/" + sketchFolder + "/archives/" + downloadId + ".zip";
        var zipFile = new File(archivesPath);
        response.addHeader('Content-type', "application/zip, application/octet-stream");
        response.addHeader('Cache-Control', 'public,max-age=12960000');
        response.addHeader("Content-Disposition", "attachment; filename=\"" + downloadId + ".zip\"");

        try {
            zipFile.open('r');
            var stream = zipFile.getStream();
            print(stream);
        } catch (err) {

        } finally {
            if (zipFile != null) {
                zipFile.close();
            }
        }

    } else if (uriMatcher.match("/{context}/apis/devices/sketch/download")) {
        //Create a new zip archive and register user calling endpoint

        /* This should match with $CARBON_HOME/repository/resources/sketches/{sketchType} */
        sketchType = request.getParameter("sketchType");
        /* This should be registered device type of the CDMF(Connected Device Management Framework) */
        deviceType = request.getParameter("deviceType");

        if (!sketchType) {
            log.error("Sketch Type is empty!");
            // http status code 400 refers to - Bad request.
            result = 400;
        } else {
            //URL: https://localhost:9443/{deviceType}/download?owner={username}
            deviceManagerService = carbonHttpsServletTransport + "/" + deviceType + "/manager";

            sketchDownloadEndPoint = deviceManagerService + "/device/" + sketchType + "/download";
            response.sendRedirect(sketchDownloadEndPoint + "?owner=" + user.username);
            exit();//stop execution

        }
    } else if (uriMatcher.match("/{context}/apis/devices/sketch/generate_link")) {

        var contents = request.getContent();
        sketchType = contents.sketchType;
        deviceType = contents.deviceType;
        generateLink = contents.generateLink;

        if (!sketchType) {
            log.error("Sketch Type is empty!");
            // http status code 400 refers to - Bad request.
            result = 400;
        } else {
            //URL: https://localhost:9443/{deviceType}/download?owner={username}
            deviceManagerService = carbonHttpsServletTransport + "/" + deviceType + "/manager";

            sketchGenerateLinkEndPoint = deviceManagerService + "/device/" + sketchType + "/generate_link";
            var fileId = get(sketchGenerateLinkEndPoint + "?owner=" + user.username, null, "text");
            result = "curl -k " + carbonHttpsServletTransport + constants.WEB_APP_CONTEXT + "/apis/devices/sketch/download/" + fileId.data;
        }

    } else if (uriMatcher.match("/{context}/apis/devices/all")) {
        result = deviceModule.getOwnDevices();
    } else if (uriMatcher.match("/{context}/apis/devices/count")) {
        var count = deviceModule.getOwnDevicesCount().data;
        result = count.toString();
    } else if (uriMatcher.match("/{context}/apis/devices/types")) {

        result = deviceModule.listDeviceTypes();

    } else if (uriMatcher.match("/{context}/apis/devices/{deviceType}/{deviceId}/remove")) {
        var elements = uriMatcher.elements();
        var deviceId = elements.deviceId;
        var deviceType = elements.deviceType;
        result = deviceModule.removeDevice(deviceType, deviceId);

    } else if (uriMatcher.match("/{context}/apis/devices/{deviceType}/{deviceId}/update")) {
        var elements = uriMatcher.elements();
        var deviceId = elements.deviceId;
        var deviceType = elements.deviceType;
        var cont = request.getContent();

        if (!cont.device) {
            // http status code 400 refers to - Bad request.
            result = 400;
        } else {
            result = deviceModule.updateDevice(deviceType, deviceId, cont.device);
        }
    }
}
// returning the result.
if (result) {
    print(result);
}
%>
